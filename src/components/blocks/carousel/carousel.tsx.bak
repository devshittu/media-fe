import Image from 'next/image';
import React, { useEffect, useState } from 'react';
import { CarouselItem, CarouselOptions, CarouselProps } from './types';

// class Carousel {
//   constructor(items: CarouselItem, options: CarouselOptions) {
//     this.items = items;
//     this.options = options;
//     this.activeIndex = 0;
//     this.timer = null;
//     this.isPaused = false;
//   }

//   handlePrev = () => {
//     const { items } = this;
//     const { onPrev } = this.options;
//     this.activeIndex = this.activeIndex === 0 ? items.length - 1 : this.activeIndex - 1;
//     this.showActiveItem();
//     if (onPrev) {
//       onPrev();
//     }
//   };

//   handleNext = () => {
//     const { items } = this;
//     const { onNext } = this.options;
//     this.activeIndex = this.activeIndex === items.length - 1 ? 0 : this.activeIndex + 1;
//     this.showActiveItem();
//     if (onNext) {
//       onNext();
//     }
//   };

//   handleIndicatorClick = (index) => {
//     const { items } = this;
//     this.activeIndex = index;
//     this.showActiveItem();
//   };

//   showActiveItem = () => {
//     const { items, options } = this;
//     const { onChange } = options;
//     items.forEach((item, index) => {
//       const { el } = item;
//       if (el) {
//         if (index === this.activeIndex) {
//           el.style.display = 'block';
//         } else {
//           el.style.display = 'none';
//         }
//       }
//     });
//     if (onChange) {
//       onChange();
//     }
//   };

//   startAutoPlay = () => {
//     const { interval } = this.options;
//     this.timer = setInterval(() => {
//       if (!this.isPaused) {
//         this.handleNext();
//       }
//     }, interval || 3000);
//   };

//   pauseAutoPlay = () => {
//     this.isPaused = true;
//   };

//   resumeAutoPlay = () => {
//     this.isPaused = false;
//   };

//   init = () => {
//     const { items, options } = this;
//     const { indicators } = options;
//     items.forEach((item) => {
//       const { el } = item;
//       if (el) {
//         el.style.display = 'none';
//       }
//     });
//     this.showActiveItem();
//     if (indicators) {
//       const { items: indicatorItems, activeClasses, inactiveClasses } = indicators;
//       if (indicatorItems) {
//         indicatorItems.forEach((indicator, index) => {
//           const { el, position } = indicator;
//           if (el) {
//             el.addEventListener('click', () => {
//               this.handleIndicatorClick(position);
//             });
//             if (position === this.activeIndex) {
//               el.classList.add(activeClasses);
//             } else {
//               el.classList.add(inactiveClasses);
//             }
//           }
//         });
//       }
//     }
//     this.startAutoPlay();
//   };
// }

// const [carousel, setCarousel] = useState(null);

// useEffect(() => {
//   const carouselInstance = new Carousel(items, options);
//   setCarousel(carouselInstance);
//   carouselInstance.init();
//   return () => {
//     clearInterval(carouselInstance.timer);
//   };
// }, []);

class Carousel implements CarouselProps {
  items: CarouselItem[];
  options?: CarouselOptions;

  constructor(items: CarouselItem[], options?: CarouselOptions) {
    this.items = items;
    this.options = options;
  }

  render(): JSX.Element {
    return <CarouselComponent items={this.items} options={this.options} />;
  }
}

const CarouselComponent = ({ items }: CarouselProps) => {
  const [activeIndex, setActiveIndex] = useState(0);

  const handlePrev = () => {
    setActiveIndex((prevIndex) =>
      prevIndex === 0 ? items.length - 1 : prevIndex - 1,
    );
  };

  const handleNext = () => {
    setActiveIndex((prevIndex) =>
      prevIndex === items.length - 1 ? 0 : prevIndex + 1,
    );
  };

  return (
    <div
      id="animation-carousel"
      className="relative w-full"
      data-carousel="static"
    >
      {/* <!-- Carousel wrapper --> */}
      <div className="relative h-48 overflow-hidden rounded-lg md:h-56">
        {items.map((item, index) => (
          <React.Fragment key={index}>
            <div
              id={item.id}
              className={`duration-200 ease-linear absolute inset-0 transition-transform transform ${
                index === activeIndex
                  ? 'translate-x-0 z-[5]'
                  : ' -translate-x-full z-[4]'
              }`}
              data-carousel-item={index === activeIndex ? 'active' : 'inactive'}
            >
              {item.media.includes('.mp4') ? (
                <video
                  className="w-full h-full object-cover"
                  autoPlay
                  muted
                  loop
                >
                  <source src={item.media} type="video/mp4" />
                </video>
              ) : (
                <Image
                  width="500"
                  height="300"
                  className="absolute block w-full -translate-x-1/2 -translate-y-1/2 top-1/2 left-1/2 "
                  src={item.media}
                  alt=""
                  loading="eager"
                />
              )}
            </div>
            <div className="absolute bottom-0 left-0 z-[10] w-full p-4 bg-black/30 backdrop-blur-md bg-opacity-50 text-white">
              <p className="text-lg font-medium">{item.caption}</p>
            </div>
          </React.Fragment>
        ))}

        {/* <!-- Slider controls --> */}
        <button
          type="button"
          className="absolute top-0 left-0 z-[6] flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none"
          data-carousel-prev
          onClick={handlePrev}
        >
          <span className="inline-flex items-center justify-center w-8 h-8 rounded-full sm:w-10 sm:h-10 bg-white/30 dark:bg-slate-800/30 group-hover:bg-white/50 dark:group-hover:bg-slate-800/60 group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-slate-800/70 group-focus:outline-none">
            <svg
              aria-hidden="true"
              className="w-5 h-5 text-white sm:w-6 sm:h-6 dark:text-slate-800"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M15 19l-7-7 7-7"
              ></path>
            </svg>
            <span className="sr-only">Previous</span>
          </span>
        </button>
        <button
          type="button"
          className="absolute top-0 right-0 z-[6] flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none"
          data-carousel-next
          onClick={handleNext}
        >
          <span className="inline-flex items-center justify-center w-8 h-8 rounded-full sm:w-10 sm:h-10 bg-white/30 dark:bg-slate-800/30 group-hover:bg-white/50 dark:group-hover:bg-slate-800/60 group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-slate-800/70 group-focus:outline-none">
            <svg
              aria-hidden="true"
              className="w-5 h-5 text-white sm:w-6 sm:h-6 dark:text-slate-800"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M9 5l7 7-7 7"
              ></path>
            </svg>
            <span className="sr-only">Next</span>
          </span>
        </button>
      </div>
    </div>
  );
};

export default { CarouselComponent, Carousel };
