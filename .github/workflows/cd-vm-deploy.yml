name: CD Pipeline for Docker Compose

on:
  workflow_run:
    workflows: ['CI Pipeline']
    branches:
      - staging
    types:
      - completed
  pull_request:
    branches:
      - staging
  workflow_dispatch:

env:
  DOCKER_INTERNAL_NETWORK_NAME: 'my_media_network'

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: self-hosted
    environment: staging

    steps:
      - name: Fix permissions before checkout
        run: sudo chown -R $USER:$USER /home/mediavmuser/actions-runner/_work/media-be/

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.workflow_run.head_branch }} # Dynamically checkout the branch that triggered the workflow

      - name: Set up environment variables
        run: |
          echo "APP_NAME=${{ vars.APP_NAME }}" >> .env.docker-compose
          echo "APP_CODE_NAME=${{ vars.APP_CODE_NAME }}" >> .env.docker-compose
          echo "APP_VERSION=${{ vars.APP_VERSION }}" >> .env.docker-compose
          echo "APP_DESCRIPTION=${{ vars.APP_DESCRIPTION }}" >> .env.docker-compose
          echo "APP_FRONTEND_DOMAIN=${{ vars.APP_FRONTEND_DOMAIN }}" >> .env.docker-compose
          echo "APP_BASE_URL=${{ vars.APP_BASE_URL }}" >> .env.docker-compose
          echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env.docker-compose
          echo "DJANGO_DEBUG=${{ secrets.DJANGO_DEBUG }}" >> .env.docker-compose
          echo "DJANGO_SUPERUSER_EMAIL=${{ vars.DJANGO_SUPERUSER_EMAIL }}" >> .env.docker-compose
          echo "DJANGO_SUPERUSER_PASSWORD=${{ vars.DJANGO_SUPERUSER_PASSWORD }}" >> .env.docker-compose
          echo "DJANGO_SUPERUSER_USERNAME=${{ vars.DJANGO_SUPERUSER_USERNAME }}" >> .env.docker-compose
          echo "DJANGO_SUPERUSER_DISPLAY_NAME=${{ vars.DJANGO_SUPERUSER_DISPLAY_NAME }}" >> .env.docker-compose
          echo "DJANGO_SUPERUSER_AVATAR_URL=${{ vars.DJANGO_SUPERUSER_AVATAR_URL }}" >> .env.docker-compose
          echo "DJANGO_SUPERUSER_HAS_COMPLETED_SETUP=${{ vars.DJANGO_SUPERUSER_HAS_COMPLETED_SETUP }}" >> .env.docker-compose
          echo "DJANGO_ALLOWED_HOSTS=${{ vars.DJANGO_ALLOWED_HOSTS }}" >> .env.docker-compose
          echo "APP_MEDIA_ENVIRONMENT=${{ vars.APP_MEDIA_ENVIRONMENT }}" >> .env.docker-compose
          echo "TWILIO_ACCOUNT_SID=${{ secrets.TWILIO_ACCOUNT_SID }}" >> .env.docker-compose
          echo "TWILIO_AUTH_TOKEN=${{ secrets.TWILIO_AUTH_TOKEN }}" >> .env.docker-compose
          echo "TWILIO_PHONE_NUMBER=${{ secrets.TWILIO_PHONE_NUMBER }}" >> .env.docker-compose
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env.docker-compose
          echo "POSTGRES_DB=${{ vars.POSTGRES_DB }}" >> .env.docker-compose
          echo "POSTGRES_USER=${{ vars.POSTGRES_USER }}" >> .env.docker-compose
          echo "POSTGRES_PASSWORD=${{ vars.POSTGRES_PASSWORD }}" >> .env.docker-compose
          echo "POSTGRES_HOST=${{ vars.__DOCKER_COMPOSE_POSTGRES_HOST }}" >> .env.docker-compose
          echo "POSTGRES_PORT=${{ vars.POSTGRES_PORT }}" >> .env.docker-compose
          echo "NEO4J_USERNAME=${{ vars.NEO4J_USERNAME }}" >> .env.docker-compose
          echo "NEO4J_PASSWORD=${{ vars.NEO4J_PASSWORD }}" >> .env.docker-compose
          echo "NEO4J_AUTH=${{ vars.NEO4J_AUTH }}" >> .env.docker-compose
          echo "NEO4J_HOST=${{ vars.__DOCKER_COMPOSE_NEO4J_HOST }}" >> .env.docker-compose
          echo "NEO4J_PORT=${{ vars.NEO4J_PORT }}" >> .env.docker-compose
          echo "REDIS_PASSWORD=${{ vars.REDIS_PASSWORD }}" >> .env.docker-compose
          echo "REDIS_HOST=${{ vars.__DOCKER_COMPOSE_REDIS_HOST }}" >> .env.docker-compose
          echo "REDIS_PORT=${{ vars.REDIS_PORT }}" >> .env.docker-compose
          echo "CELERY_BROKER_URL=${{ vars.__DOCKER_COMPOSE_CELERY_BROKER_URL }}" >> .env.docker-compose
          echo "CELERY_RESULT_BACKEND=${{ vars.__DOCKER_COMPOSE_CELERY_RESULT_BACKEND }}" >> .env.docker-compose
          echo "APP_MEDIA_EMAIL_BACKEND=${{ vars.APP_MEDIA_EMAIL_BACKEND }}" >> .env.docker-compose
          echo "APP_MEDIA_EMAIL_HOST=${{ vars.APP_MEDIA_EMAIL_HOST }}" >> .env.docker-compose
          echo "APP_MEDIA_EMAIL_USE_TLS=${{ vars.APP_MEDIA_EMAIL_USE_TLS }}" >> .env.docker-compose
          echo "APP_MEDIA_EMAIL_PORT=${{ vars.APP_MEDIA_EMAIL_PORT }}" >> .env.docker-compose
          echo "APP_MEDIA_EMAIL_HOST_USER=mshittu.work@gmail.com" >> .env.docker-compose
          echo "APP_MEDIA_EMAIL_HOST_PASSWORD=${{ secrets.APP_MEDIA_EMAIL_HOST_PASSWORD }}" >> .env.docker-compose
          echo "APP_MEDIA_SENDGRID_API_KEY_NAME=${{ vars.APP_MEDIA_SENDGRID_API_KEY_NAME }}" >> .env.docker-compose
          echo "APP_MEDIA_SENDGRID_API_KEY_ID=${{ secrets.APP_MEDIA_SENDGRID_API_KEY_ID }}" >> .env.docker-compose
          echo "APP_MEDIA_SENDGRID_API_KEY=${{ secrets.APP_MEDIA_SENDGRID_API_KEY }}" >> .env.docker-compose
          echo "GS_BUCKET_NAME=${{ vars.GS_BUCKET_NAME }}" >> .env.docker-compose
          echo "GS_CREDENTIALS=${{ secrets.GS_CREDENTIALS }}" >> .env.docker-compose
          echo "GS_PROJECT_ID=${{ secrets.GS_PROJECT_ID }}" >> .env.docker-compose
          echo "POSTS_PER_PAGE=${{ vars.POSTS_PER_PAGE }}" >> .env.docker-compose
          echo "ANCESTORS_PER_PAGE=${{ vars.ANCESTORS_PER_PAGE }}" >> .env.docker-compose
          echo "DESCENDANTS_PER_PAGE=${{ vars.DESCENDANTS_PER_PAGE }}" >> .env.docker-compose

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | sudo docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Create Docker network if not exists
        run: |
          if ! sudo docker network ls | grep -q ${{ env.DOCKER_INTERNAL_NETWORK_NAME }}; then
            sudo docker network create ${{ env.DOCKER_INTERNAL_NETWORK_NAME }};
          fi
      - name: Pull Docker image
        run: |
          sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/mediaapp:frontend-app-latest

      - name: Delete Old docker container for frontend app
        run: sudo docker compose -f docker-compose.staging.yml down frontend-app || true

      - name: Run Docker Container for frontend app
        run: sudo docker compose --env-file .env.docker-compose -f docker-compose.staging.yml up -d

      # - name: Run init-frontend-app.sh in backend-app container
      #   run: sudo docker exec backend-app bash -c "./k8s/scripts/init-frontend-app.sh"

    #   - name: Remove Untagged Docker Images
    #     run: |
    #       dangling_images=$(sudo docker images -f "dangling=true" -q)
    #       if [ -n "$dangling_images" ]; then
    #         sudo docker rmi $dangling_images
    #       else
    #         echo "No dangling images to remove"
    #       fi
# .github/workflows/cd-vm-deploy.yml
